{"version":3,"sources":["components/Welcome.tsx","components/CourseDropdown.tsx","components/Message.tsx","components/Footer.tsx","styles.ts","NewItemForm.tsx","utils/useFocus.ts","AddNewItem.tsx","utils/arrayUtils.ts","state/appStateReducer.tsx","state/AppStateContext.tsx","state/actions.ts","utils/useItemDrag.ts","utils/isHidden.ts","Card.tsx","Column.tsx","CustomDragLayer.tsx","components/ListContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Welcome","style","styles","welcome","width","padding","margin","background","borderRadius","display","flexDirection","alignItems","fontSize","Dropdown","dropdown","options","value","placeholder","border","Message","useState","show","setShow","popup","ToastContainer","position","className","Toast","onClose","ToastHeader","Body","color","Footer","footer","backgroundColor","bottom","left","AppContainer","styled","div","ColumnTitle","DragPreviewContainer","props","isPreview","undefined","isHidden","DragPreviewWrapper","attrs","x","y","transform","ColumnContainer","CardContainer","AddItemButton","button","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","CustomDragLayerContainer","NewItemForm","onAdd","text","setText","inputRef","ref","useRef","useEffect","current","focus","useFocus","onChange","e","target","onKeyPress","event","key","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","findItemIndexById","items","id","findIndex","item","moveItem","array","from","to","index","slice","insertItemAtIndex","removeItemAtIndex","appStateReducer","draft","action","type","draggedItem","payload","lists","push","nanoid","Button","courses","listId","targetListIndex","draggedId","hoverId","dragIndex","hoverIndex","draggedItemId","hoveredItemId","sourceColumnId","targetColumnId","sourceListIndex","splice","AppStateContext","createContext","deleteSemester","appData","useAppState","useContext","AppStateProvider","children","useImmerReducer","state","dispatch","Provider","getCoursesByListId","find","list","setDraggedItem","moveTask","useItemDrag","useDrag","end","drag","preview","getEmptyImage","captureDraggingState","itemType","Boolean","Card","columnId","useDrop","accept","hover","drop","Column","length","Row","map","task","addTask","CustomDragLayer","currentOffset","useDragLayer","monitor","getSourceClientOffset","ListContainer","test","addList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.67cf7317.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Welcome(): JSX.Element {\n    return(\n        <div style={styles.welcome}>\n            <p>UD CIS Scheduler</p>\n        </div>\n    );\n}\n\nconst styles = {\n    welcome: {\n        width: \"80%\",\n        padding: \"0px 0px\",\n        margin: \"50px auto\",\n        background: \"white\",\n        borderRadius: \"20px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        fontSize: 30,\n    },\n} as const;","import React from \"react\";\nimport DropdownBox from \"react-dropdown\";\n\n\nexport function Dropdown(): JSX.Element {\n    const options =[\"BS CS\", \"BS w/AI Concentration\", \"BS w/Bioinformatics Concentration\",\"BS w/Cybersecurity Concentration\", \"BS w/Data Science Concentration\", \"BS w/High Performance Computing Concentration\", \"BS w/Systems and Networks Concentration\", \"BS w/Theory and Computation Concentration\"];\n    const defaultOption = \"Click Here.\";\n    return(\n        <div style={styles.dropdown}>\n            <h3>Major Selector</h3>\n            <DropdownBox options={options} value={defaultOption} placeholder=\"Select an option\" />\n        </div>\n    );\n}\n\nconst styles = {\n    dropdown: {\n        width: \"40%\",\n        //padding: \"0px 0px\",\n        margin: \"10px auto\",\n        background: \"tan\",\n        borderRadius: \"111px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        fontSize: 20,\n        border: \"10px solid black\",\n    },\n} as const;\n\n","import Toast from \"react-bootstrap/Toast\";\nimport ToastContainer from \"react-bootstrap/ToastContainer\";\nimport ToastHeader from \"react-bootstrap/ToastHeader\";\nimport React, { useState } from \"react\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nexport function Message(): JSX.Element{\n    const [show, setShow] = useState(false);\n    return(\n        <div style={styles.popup}>\n            <ToastContainer position=\"top-end\" className=\"m-3\">\n                <Toast show={!show} onClose={()=>setShow(!show)}>\n                    <ToastHeader>\n                        <strong className=\"me-auto\">Welcome to the UD CIS Scheduler!</strong>\n                    </ToastHeader>\n                    <Toast.Body> \n                    Please select a major to get started. Required courses will populate for you to build a schedule.\n                    </Toast.Body>\n                </Toast>\n            </ToastContainer>\n        </div>\n    );\n}\nconst styles = {\n    popup: {\n        //background: \"black\",\n        color: \"blue\",\n    },\n} as const;\n\n\n\n","import React from \"react\";\n\nexport function Footer(): JSX.Element {\n    return(\n        <div style={styles.footer}>\n            <p>Made for CISC275 at the University of Delaware</p>\n            <p>&copy; 2021 Tyler Rust, Noah Trungold, James Wan</p>\n        </div>\n    );\n}\n\nconst styles = {\n    footer: {\n        backgroundColor: \"Cyan\",\n        position: \"fixed\",\n        bottom: \"0\",\n        left: \"0\",\n        width: \"100%\",\n    },\n} as const;\n","import styled from \"styled-components\";\n\nexport const AppContainer = styled.div`\n    align-items: flex-start;\n    background-color: #3179ba;\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n    padding: 20px;\n    width: 100%;\n`;\nexport const ColumnTitle = styled.div`\npadding: 6px 16px 12px;\nfont-weight: bold;\n`;\ntype DragPreviewContainerProps = {\n    isHidden?: boolean\n    isPreview?: boolean\n}\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n    transform: ${props => props.isPreview ? \"rotate(5deg)\" : undefined};\n    opacity: ${props => props.isHidden ? 0 : 1};\n`;\n\ntype DragPreviewWrapperProps = {\n    position: {\n        x: number\n        y: number\n    }\n}\nexport const DragPreviewWrapper = styled.div.attrs<DragPreviewWrapperProps>(\n    ({ position: { x, y } }) => ({\n        style: {\n            transform: `translate(${x}px, ${y}px)`\n        }\n    })\n) <DragPreviewWrapperProps>``;\n\nexport const ColumnContainer = styled(DragPreviewContainer)`\n    background-color: #ebecf0;\n    width: 300px;\n    min-height: 40px;\n    margin-right: 20px;\n    border-radius: 3px;\n    padding: 8px 8px;\n    flex-grow: 0;\n`;\n\n\nexport const CardContainer = styled(DragPreviewContainer)`\n    background-color: #fff;\n    cursor: pointer;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    max-width: 300px;\n    border-radius: 3px;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n`;\n\ntype AddItemButtonProps = {\n    dark?: boolean\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n    background-color: #ffffff3d;\n    border-radius: 3px;\n    border: none;\n    color: ${props => props.dark ? \"#000\" : \"#fff\"};\n    cursor: pointer;\n    max-width: 300px;\n    padding: 10px 12px;\n    text-align: left;\n    transition: background 85ms ease-in;\n    width: 100%;\n    &:hover {\n    background-color: #ffffff52;\n    }\n`;\nexport const NewItemFormContainer = styled.div`\n    max-width: 300px;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    align-items: flex-start;\n`;\n\nexport const NewItemButton = styled.button`\n    background-color: #5aac44;\n    border-radius: 3px;\n    border: none;\n    box-shadow: none;\n    color: #fff;\n    padding: 6px 12px;\n    text-align: center;\n`;\nexport const NewItemInput = styled.input`\n    border-radius: 3px;\n    border: none;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    width: 100%;\n`;\nexport const CustomDragLayerContainer = styled.div`\n    height: 100%;\n    left: 0;\n    pointer-events: none;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: 100;\n`;//rendered first\n\n\n","import React, { useState } from \"react\";\nimport { NewItemFormContainer, NewItemButton, NewItemInput } from \"./styles\";\nimport { useFocus } from \"./utils/useFocus\";\n\n\ntype NewItemFormProps = {\n    onAdd(text: string): void\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps): JSX.Element => {\n    const [text, setText] = useState(\"\");\n    const inputRef = useFocus();\n    //add enter key for create\n    const handleAddText = (\n        event: React.KeyboardEvent<HTMLInputElement>\n    ) => {\n        if (event.key === \"Enter\") {\n            onAdd(text);\n        }\n    };\n        \n    return (\n        <NewItemFormContainer>\n            <NewItemInput\n                ref={inputRef}\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                onKeyPress={handleAddText}\n            />\n            <NewItemButton onClick={() => onAdd(text)}>\n                Create\n            </NewItemButton>\n        </NewItemFormContainer>\n    );\n};","import { useRef, useEffect } from \"react\";\n\n//refs react hook to reference DOM nodes of rendered React elements\nexport const useFocus = ():React.RefObject<HTMLInputElement> => {\n    const ref = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        ref.current?.focus();//ref will be immutable, use ?. to access it\n    }, []);\n    return ref;\n};\n//access the rendered input element","import React, { useState} from \"react\";\nimport { AddItemButton } from \"./styles\";\nimport { NewItemForm } from \"./NewItemForm\";\n\n\ntype AddNewItemProps = {\n    onAdd(text: string): void\n    toggleButtonText: string\n    dark?: boolean\n    }\n\nexport const AddNewItem = (props: AddNewItemProps): JSX.Element => {\n    const [showForm, setShowForm] = useState(false);\n    const { onAdd, toggleButtonText, dark } = props;\n    \n    if (showForm) {\n        return (\n            <NewItemForm\n                onAdd={text => {\n                    onAdd(text);\n                    setShowForm(false);\n                }}\n            />\n        );\n    }\n        \n    \n    return (\n        <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n            {toggleButtonText}\n        </AddItemButton>\n    );\n};","type Item = {\n    id: string\n}\n\nexport const findItemIndexById = <TItem extends Item>(\n    items: TItem[],\n    id: string\n):number => {\n    return items.findIndex((item: TItem) => item.id === id);\n};\nexport const moveItem = <TItem>(array: TItem[], from: number, to: number): TItem[] => {\n    const item = array[from];\n    return insertItemAtIndex(removeItemAtIndex(array, from), item, to);\n};\n\nexport function removeItemAtIndex<TItem>(array: TItem[], index: number)\n:TItem[]{\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n}\n\nexport function insertItemAtIndex<TItem>(\n    array: TItem[],\n    item: TItem,\n    index: number\n): TItem[] {\n    return [...array.slice(0, index), item, ...array.slice(index)];\n}\n    ","import React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { findItemIndexById, moveItem } from \"../utils/arrayUtils\";\nimport { DragItem } from \"../DragItem\";\nimport { Action } from \"./actions\";\nimport { Button } from \"react-bootstrap\";\n\nexport type Task = {\n    id: string\n    text: string\n}\n\nexport type List = {\n    id: string\n    text: string\n    button: JSX.Element\n    courses: Task[]\n}\n\nexport type AppState = {\n    draggedItem: DragItem | null\n    lists: List[]\n}\n\nexport const appStateReducer = (\n    draft: AppState,\n    action: Action\n): AppState | void => {\n    switch (action.type) {\n    case \"SET_DRAGGED_ITEM\": {\n        draft.draggedItem = action.payload;\n        break;\n    }\n    case \"ADD_LIST\": {\n        draft.lists.push({\n            id: nanoid(),\n            text: action.payload,\n            button: <Button></Button>,\n            courses: [],\n        });\n        break;\n    }\n    case \"ADD_TASK\": {\n        const { text, listId } = action.payload;\n        const targetListIndex = findItemIndexById(draft.lists, listId);\n        draft.lists[targetListIndex].courses.push({\n            id: nanoid(),\n            text\n        });\n        break;\n    }\n    case \"MOVE_LIST\": {\n        const { draggedId, hoverId } = action.payload;\n        const dragIndex = findItemIndexById(draft.lists, draggedId);\n        const hoverIndex = findItemIndexById(draft.lists, hoverId);\n        draft.lists = moveItem(draft.lists, dragIndex, hoverIndex);\n        break;\n    }\n    case \"MOVE_TASK\": {\n        const {\n            draggedItemId,\n            hoveredItemId,\n            sourceColumnId,\n            targetColumnId\n        } = action.payload;\n\n        const sourceListIndex = findItemIndexById(\n            draft.lists,\n            sourceColumnId\n        );\n        const targetListIndex = findItemIndexById(\n            draft.lists,\n            targetColumnId\n        );\n\n        const dragIndex = findItemIndexById(\n            draft.lists[sourceListIndex].courses,\n            draggedItemId\n        );\n\n        const hoverIndex = hoveredItemId\n            ? findItemIndexById(\n                draft.lists[targetListIndex].courses,\n                hoveredItemId\n            )\n            : 0;\n        const item = draft.lists[sourceListIndex].courses[dragIndex];\n\n        // Remove the task from the source list\n        draft.lists[sourceListIndex].courses.splice(dragIndex, 1);\n\n        // Add the task to the target list\n        draft.lists[targetListIndex].courses.splice(hoverIndex, 0, item);\n        break;\n    }\n    default: {\n        break;\n    }\n    }\n};","import React, { createContext, useContext, Dispatch, FC } from \"react\";\nimport { Action } from \"./actions\";\nimport { useImmerReducer } from \"use-immer\";\nimport { Button } from \"react-bootstrap\";\nimport {\n    appStateReducer,\n    AppState,\n    List,\n    Task\n} from \"./appStateReducer\";\nimport { DragItem } from \"../DragItem\";\n\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps);\n\nfunction deleteSemester(index: number) {\n    appData.lists.splice(index,index);\n}\n\nconst appData: AppState = {\n    draggedItem: null,\n    lists: [\n        {\n            id: \"0\",\n            text: \"Course List\",\n            button: <Button onClick={() => deleteSemester(0)}>X</Button>,\n            courses: [{ id: \"c0\", text: \"Cisc 106\" },{ id:\"c1\", text: \"Cisc108\"}]\n        },\n        {\n            id: \"1\",\n            text: \"Year 1: Semester 1\",\n            button: <Button onClick={() => deleteSemester(1)}>X</Button>,\n            courses: [{ id: \"c2\", text: \"Learn Typescript\" }]\n        },\n        {\n            id: \"2\",\n            text: \"Year 1: Semester 2\",\n            button: <Button onClick={() => deleteSemester(2)}>X</Button>,\n            courses: [{ id: \"c3\", text: \"Begin to use static typing\" }]\n        } \n    ]\n};\n\ntype AppStateContextProps = {\n    draggedItem: DragItem | null\n    lists: List[]\n    getCoursesByListId(id: string): Task[]\n    dispatch: Dispatch<Action>\n}\n    \n//making sure we can access data globally\nexport const useAppState = (): AppStateContextProps => {\n    return useContext(AppStateContext);\n};\n\nexport const AppStateProvider: FC = ({ children }) => {\n    const [state, dispatch] = useImmerReducer(appStateReducer, appData);\n    \n    const { draggedItem, lists } = state;\n    const getCoursesByListId = (id: string) => {\n        return lists.find((list) => list.id === id)?.courses || [];\n    };\n    return (\n        <AppStateContext.Provider value={{ draggedItem, lists, getCoursesByListId, dispatch }}>\n            {children}\n        </AppStateContext.Provider>\n    );\n};","import { DragItem } from \"../DragItem\";\n\n//an action now can resort to one of the forms we passed in, the list or task\nexport type Action =\n    | {\n        type: \"MOVE_TASK\"\n        payload: {\n            draggedItemId: string\n            hoveredItemId: string | null\n            sourceColumnId: string\n            targetColumnId: string\n        }\n    }\n    | {\n        type: \"ADD_LIST\"\n        payload: string\n    }\n    | {\n        type: \"ADD_TASK\"\n        payload: { text: string; listId: string }\n    }\n    | {\n        type: \"MOVE_LIST\"\n        payload: {\n            draggedId: string\n            hoverId: string\n        }\n    }\n    | {\n        type: \"SET_DRAGGED_ITEM\"\n        payload: DragItem | null\n    }\n\n/*what I had before I decided to use a discriminated union which\nallows the Typescript to look at the property and understand the other fields\n    interface AddListAction {\n        type: \"ADD_LIST\"\n        payload: string\n    }\n\n    interface AddTaskAction {\n        type: \"ADD_LIST\"\n        payload: { text: string; listId: string }\n    }\n\n    type Action = AddListAction | AddTaskAction\n\n*/\n\n\nexport const addTask = (\n    text: string,\n    listId: string,\n): Action => ({\n    type: \"ADD_TASK\",\n    payload: {\n        text,\n        listId\n    }\n});\n\nexport const addList = (\n    text: string,\n): Action => ({\n    type: \"ADD_LIST\",\n    payload: text\n});\n\nexport const moveList = (\n    draggedId: string,\n    hoverId: string,\n): Action => ({\n    type: \"MOVE_LIST\",\n    payload: {\n        draggedId,\n        hoverId,\n    }\n});\n\nexport const setDraggedItem = (\n    draggedItem: DragItem | null,\n): Action => ({\n    type: \"SET_DRAGGED_ITEM\",\n    payload: draggedItem\n});\n\nexport const moveTask = (\n    draggedItemId: string,\n    hoveredItemId: string | null,\n    sourceColumnId: string,\n    targetColumnId: string\n): Action => ({\n    type: \"MOVE_TASK\",\n    payload: {\n        draggedItemId,\n        hoveredItemId,\n        sourceColumnId,\n        targetColumnId\n    }\n});\n\n\n","import { ConnectDragSource, useDrag } from \"react-dnd\";\nimport { useAppState } from \"../state/AppStateContext\";\nimport { DragItem } from \"../DragItem\";\nimport { setDraggedItem } from \"../state/actions\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { useEffect } from \"react\";\nexport const useItemDrag = (item: DragItem): {drag: ConnectDragSource} => {\n    const { dispatch } = useAppState();\n    const [, drag, preview] = useDrag({\n        type: item.type,\n        item: () => {\n            dispatch(setDraggedItem(item));\n            return item;\n        },\n        end: () => dispatch(setDraggedItem(null))\n    });\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n    return { drag };\n};","import { DragItem } from \"../DragItem\";\nexport const isHidden = (\n    draggedItem: DragItem | null,\n    itemType: string,\n    id: string,\n    isPreview?: boolean\n): boolean => {\n    return Boolean(\n        !isPreview &&\n        draggedItem &&\n        draggedItem.type === itemType &&\n        draggedItem.id === id\n    );\n};\n","import React from \"react\";\nimport { useRef } from \"react\";\nimport { CardContainer } from \"./styles\";\nimport { useItemDrag } from \"./utils/useItemDrag\";\nimport { useDrop } from \"react-dnd\";\nimport { useAppState } from \"./state/AppStateContext\";\nimport { isHidden } from \"./utils/isHidden\";\nimport { moveTask } from \"./state/actions\";\n\ntype CardProps = {\n    text: string\n    id: string\n    columnId: string\n    isPreview?: boolean\n}\n\nexport const Card = ({\n    text,\n    id,\n    columnId,\n    isPreview\n}: CardProps): JSX.Element => {\n    const { draggedItem, dispatch } = useAppState();\n    const ref = useRef<HTMLDivElement>(null);\n    const { drag } = useItemDrag({\n        type: \"CARD\",\n        id,\n        text,\n        columnId\n    });\n    const [, drop] = useDrop({\n        accept: \"CARD\",\n        hover() {\n            if (!draggedItem) {\n                return;\n            }\n            if (draggedItem.type !== \"CARD\") {\n                return;\n            }\n            if (draggedItem.id === id) {\n                return;\n            }\n\n            dispatch(\n                moveTask(draggedItem.id, id, draggedItem.columnId, columnId)\n            );\n        }\n    });\n\n    drag(drop(ref));\n\n    return (\n        <CardContainer\n            isHidden={isHidden(draggedItem, \"CARD\", id, isPreview)}\n            isPreview={isPreview}\n            ref={ref}\n        >\n            {text}\n        </CardContainer>\n    );\n};","import React, { useRef} from \"react\";\nimport { ColumnContainer, ColumnTitle } from \"./styles\";\nimport { useAppState } from \"./state/AppStateContext\";\nimport { Card } from \"./Card\";\nimport { AddNewItem } from \"./AddNewItem\";\nimport { useItemDrag } from \"./utils/useItemDrag\";\nimport { useDrop } from \"react-dnd\";\nimport { isHidden } from \"./utils/isHidden\";\nimport { Row } from \"react-bootstrap\";\nimport {\n    addTask,\n    moveTask,\n    moveList,\n    setDraggedItem\n} from \"./state/actions\";\n\ntype ColumnProps = {\n    text: string\n    id: string\n    button: JSX.Element\n    isPreview?: boolean\n}\n\nexport const Column = ({ text, id, button, isPreview }: ColumnProps): JSX.Element => {\n    const { draggedItem, getCoursesByListId, dispatch } = useAppState();\n    const courses = getCoursesByListId(id);\n    const ref = useRef<HTMLDivElement>(null);\n    const [, drop] = useDrop({\n        accept: [\"COLUMN\", \"CARD\"],\n        hover() {\n            if (!draggedItem) {\n                return;\n            }\n            if (draggedItem.type === \"COLUMN\") {\n                if (draggedItem.id === id) {\n                    return;\n                }\n\n                dispatch(moveList(draggedItem.id, id));\n            } else {\n                if (draggedItem.columnId === id) {\n                    return;\n                }\n                if (courses.length) {\n                    return;\n                }\n\n                dispatch(\n                    moveTask(draggedItem.id, null, draggedItem.columnId, id)\n                );\n                dispatch(setDraggedItem({ ...draggedItem, columnId: id }));\n            }\n        }\n    });\n\n    const { drag } = useItemDrag({ type: \"COLUMN\", id, button, text });\n\n    drag(drop(ref));\n\n    return (\n        <ColumnContainer\n            isPreview={isPreview}\n            ref={ref}\n            isHidden={isHidden(draggedItem, \"COLUMN\", id, isPreview)}\n        >\n            <Row>\n                <ColumnTitle>{[text, button]}</ColumnTitle>\n            </Row>\n            {courses.map(task => \n                <Card\n                    id={task.id}\n                    columnId={id}\n                    text={task.text}\n                    key={task.id}\n                />\n            )}\n            <AddNewItem\n                toggleButtonText=\"+ Add another card\"\n                onAdd={(text) => dispatch(addTask(text, id))}\n                dark\n            />\n        </ColumnContainer>\n    );\n};","import React from \"react\";\nimport { useDragLayer } from \"react-dnd\";\nimport { Column } from \"./Column\";\nimport { useAppState } from \"./state/AppStateContext\";\nimport {\n    CustomDragLayerContainer,\n    DragPreviewWrapper\n} from \"./styles\";\nimport { Card } from \"./Card\";\n//import { StyledComponent } from \"styled-components\";\n\n\nexport const CustomDragLayer = (): JSX.Element | null => {\n    const { draggedItem } = useAppState();\n    const { currentOffset } = useDragLayer((monitor) => ({\n        currentOffset: monitor.getSourceClientOffset()\n    }));\n    return draggedItem && currentOffset ? \n        <CustomDragLayerContainer>\n            <DragPreviewWrapper position={currentOffset}>\n                {draggedItem.type === \"COLUMN\" ? \n                    <Column\n                        id={draggedItem.id}\n                        text={draggedItem.text}\n                        button={draggedItem.button}\n                        isPreview\n                    />\n                    :\n                    <Card\n                        columnId={draggedItem.columnId}\n                        isPreview\n                        id={draggedItem.id}\n                        text={draggedItem.text}\n                    />\n                }\n            </DragPreviewWrapper>\n        </CustomDragLayerContainer>\n        : null;\n};\n","import React from \"react\";\nimport { AppContainer } from \"../styles\";\nimport { AddNewItem } from \"../AddNewItem\";\nimport { CustomDragLayer } from \"../CustomDragLayer\";\nimport { useAppState } from \"../state/AppStateContext\";\nimport { addList } from \"../state/actions\";\nimport { Column } from \"../Column\";\n\nexport function ListContainer(): JSX.Element {\n    const { lists, dispatch } = useAppState();\n    const test = lists.map(list => \n        <Column id={list.id} text={list.text} button={list.button} key={list.id} />\n    );\n    return(\n        <AppContainer>\n            <CustomDragLayer />\n            {test}\n            <AddNewItem\n                toggleButtonText=\"+ Add another list\"\n                onAdd={text => dispatch(addList(text))}\n            />\n        </AppContainer>\n    );\n}","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Welcome } from \"./components/Welcome\";\nimport { Dropdown } from \"./components/CourseDropdown\";\nimport \"./components/Message.css\";\nimport { Message } from \"./components/Message\";\nimport { Footer } from \"./components/Footer\";\nimport { ListContainer } from \"./components/ListContainer\";\n\nexport const App = ():JSX.Element  => {\n    return (\n        <div className = \"App\">\n            <Message />\n            <Welcome></Welcome>\n            <Dropdown></Dropdown>\n            <ListContainer />\n            <Footer />\n        </div>\n    );\n};\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppStateProvider } from \"./state/AppStateContext\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend as Backend } from \"react-dnd-html5-backend\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <DndProvider backend={Backend}>\n            <AppStateProvider>\n                <App />\n            </AppStateProvider>\n        </DndProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}