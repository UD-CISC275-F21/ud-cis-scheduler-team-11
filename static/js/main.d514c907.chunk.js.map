{"version":3,"sources":["components/Welcome.tsx","components/CourseDropdown.tsx","components/DragButtons.tsx","components/Message.tsx","components/Footer.tsx","styles.ts","NewItemForm.tsx","utils/useFocus.ts","AddNewItem.tsx","utils/arrayUtils.ts","state/appStateReducer.ts","state/AppStateContext.tsx","state/actions.ts","utils/useItemDrag.ts","utils/isHidden.ts","Card.tsx","Column.tsx","CustomDragLayer.tsx","components/ListContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Welcome","style","styles","welcome","width","padding","margin","background","borderRadius","display","flexDirection","alignItems","fontSize","Dropdown","dropdown","options","value","placeholder","border","LoadClasses","useState","id","name","core","updateCore","classes","h3","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","droppableId","provided","className","droppableProps","ref","innerRef","map","draggableId","draggableProps","dragHandleProps","marginLeft","Message","show","setShow","popup","ToastContainer","position","Toast","onClose","ToastHeader","Body","color","Footer","footer","backgroundColor","bottom","left","AppContainer","styled","div","ColumnTitle","DragPreviewContainer","props","isPreview","undefined","isHidden","DragPreviewWrapper","attrs","x","y","transform","ColumnContainer","CardContainer","AddItemButton","button","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","CustomDragLayerContainer","NewItemForm","onAdd","text","setText","inputRef","useRef","useEffect","current","focus","useFocus","onChange","e","target","onKeyPress","event","key","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","findItemIndexById","findIndex","item","moveItem","array","to","slice","insertItemAtIndex","removeItemAtIndex","appStateReducer","draft","action","type","draggedItem","payload","lists","push","nanoid","tasks","listId","targetListIndex","draggedId","hoverId","dragIndex","hoverIndex","draggedItemId","hoveredItemId","sourceColumnId","targetColumnId","sourceListIndex","AppStateContext","createContext","appData","useAppState","useContext","AppStateProvider","children","useImmerReducer","state","dispatch","Provider","getTasksByListId","find","list","setDraggedItem","moveTask","useItemDrag","useDrag","end","drag","preview","getEmptyImage","captureDraggingState","itemType","Boolean","Card","columnId","useDrop","accept","hover","drop","Column","length","task","addTask","CustomDragLayer","currentOffset","useDragLayer","monitor","getSourceClientOffset","ListContainer","test","addList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.d514c907.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Welcome(): JSX.Element {\n    return(\n        <div style={styles.welcome}>\n            <p>UD CIS Scheduler</p>\n        </div>\n    );\n}\n\nconst styles = {\n    welcome: {\n        width: \"80%\",\n        padding: \"0px 0px\",\n        margin: \"50px auto\",\n        background: \"white\",\n        borderRadius: \"20px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        fontSize: 30,\n    },\n} as const;","import React from \"react\";\nimport DropdownBox from \"react-dropdown\";\n\n\nexport function Dropdown(): JSX.Element {\n    const options =[\"BS CS\", \"BS w/AI Concentration\", \"BS w/Bioinformatics Concentration\",\"BS w/Cybersecurity Concentration\", \"BS w/Data Science Concentration\", \"BS w/High Performance Computing Concentration\", \"BS w/Systems and Networks Concentration\", \"BS w/Theory and Computation Concentration\"];\n    const defaultOption = \"Click Here.\";\n    return(\n        <div style={styles.dropdown}>\n            <h3>Major Selector</h3>\n            <DropdownBox options={options} value={defaultOption} placeholder=\"Select an option\" />\n        </div>\n    );\n}\n\nconst styles = {\n    dropdown: {\n        width: \"40%\",\n        //padding: \"0px 0px\",\n        margin: \"10px auto\",\n        background: \"tan\",\n        borderRadius: \"111px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        fontSize: 20,\n        border: \"10px solid black\",\n    },\n} as const;\n\n","import React from \"react\";\nimport {useState} from \"react\";\nimport {DragDropContext, Droppable, Draggable, DropResult} from \"react-beautiful-dnd\";\n\n\nexport function LoadClasses(): JSX.Element{\n    const coreClasses=[\n        {\n            id: \"test1\",\n            name: \"Intro to Comp Sci\",\n        },\n        {\n            id: \"test2\",\n            name: \"Intro to Comp Sci2\",\n        },\n        {\n            id: \"test3\",\n            name: \"Intro to Comp Sci3\",\n        },\n    ];\n    /*\n    if(PUT SOMETHING HERE){\n        const coreClasses=[ \n            {\n                id: \"test1\",\n                name: \"Intro to Comp Sci\",\n            },\n            {\n                id: \"test2\",\n                name: \"Intro to Comp Sci2\",\n            },\n            {\n                id: \"test3\",\n                name: \"Intro to Comp Sci3\",\n            },\n        ];\n    }else{\n        const coreClasses=[\n            {\n                id: \"test1\",\n                name: \"Intro to Comp Sci\",\n            },\n            {\n                id: \"test2\",\n                name: \"Intro to Comp Sci2\",\n            },\n            {\n                id: \"test3\",\n                name: \"Intro to Comp Sci3\",\n            },\n        ];\n    }\n    */\n    const [core, updateCore] = useState(coreClasses);\n\n\n    function handleOnDragEnd(result: DropResult){\n        if (!result.destination) return;\n    \n        const items = Array.from(core);\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n    \n        updateCore(items);\n    }\n    \n    return (\n        <div style={styles.classes}>\n            <h3 style={styles.h3}>Course List</h3>\n            <DragDropContext onDragEnd={handleOnDragEnd}>\n                <Droppable droppableId=\"core\">\n                    {provided => \n                        <ul className=\"core\" {...provided.droppableProps} ref={provided.innerRef}>\n                            {core.map(({id, name, }, index) => {\n                                return (\n                                    <Draggable key={id} draggableId={id} index={index}>\n                                        {provided => \n                                            <ul ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                                <p>\n                                                    { name }\n                                                </p>\n                                            </ul>\n                                        }\n                                    </Draggable>\n                                );\n                            })}\n                            {provided.placeholder}\n                        </ul>\n                    }\n                </Droppable>\n            </DragDropContext>\n        </div>\n    );\n}\n\nconst styles = {\n    classes: {\n        width: \"20%\",\n        padding: \"0px 80px\",\n        margin: \"50px\",\n        //margin: \"50px auto\",\n        //background: \"tan\",\n        borderRadius: \"10px\",\n        //display: \"flex\",\n        //flexDirection: \"column\",\n        //alignItems: \"center\",\n        fontSize: 20,\n        border: \"10px solid black\",\n    },\n    h3: {\n        marginLeft: \"30px\",\n    },\n} as const;","import Toast from \"react-bootstrap/Toast\";\nimport ToastContainer from \"react-bootstrap/ToastContainer\";\nimport ToastHeader from \"react-bootstrap/ToastHeader\";\nimport React, { useState } from \"react\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nexport function Message(): JSX.Element{\n    const [show, setShow] = useState(false);\n    return(\n        <div style={styles.popup}>\n            <ToastContainer position=\"top-end\" className=\"m-3\">\n                <Toast show={!show} onClose={()=>setShow(!show)}>\n                    <ToastHeader>\n                        <strong className=\"me-auto\">Welcome to the UD CIS Scheduler!</strong>\n                    </ToastHeader>\n                    <Toast.Body> \n                    Please select a major to get started. Required courses will populate for you to build a schedule.\n                    </Toast.Body>\n                </Toast>\n            </ToastContainer>\n        </div>\n    );\n}\nconst styles = {\n    popup: {\n        //background: \"black\",\n        color: \"blue\",\n    },\n} as const;\n\n\n\n","import React from \"react\";\n\nexport function Footer(): JSX.Element {\n    return(\n        <div style={styles.footer}>\n            <p>Made for CISC275 at the University of Delaware</p>\n            <p>&copy; 2021 Tyler Rust, Noah Trungold, James Wan</p>\n        </div>\n    );\n}\n\nconst styles = {\n    footer: {\n        backgroundColor: \"Cyan\",\n        position: \"fixed\",\n        bottom: \"0\",\n        left: \"0\",\n        width: \"100%\",\n    },\n} as const;\n","import styled from \"styled-components\";\n\nexport const AppContainer = styled.div`\n    align-items: flex-start;\n    background-color: #3179ba;\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n    padding: 20px;\n    width: 100%;\n`;\nexport const ColumnTitle = styled.div`\npadding: 6px 16px 12px;\nfont-weight: bold;\n`;\ntype DragPreviewContainerProps = {\n    isHidden?: boolean\n    isPreview?: boolean\n}\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n    transform: ${props => props.isPreview ? \"rotate(5deg)\" : undefined};\n    opacity: ${props => props.isHidden ? 0 : 1};\n`;\n\ntype DragPreviewWrapperProps = {\n    position: {\n        x: number\n        y: number\n    }\n}\nexport const DragPreviewWrapper = styled.div.attrs<DragPreviewWrapperProps>(\n    ({ position: { x, y } }) => ({\n        style: {\n            transform: `translate(${x}px, ${y}px)`\n        }\n    })\n) <DragPreviewWrapperProps>``;\n\nexport const ColumnContainer = styled(DragPreviewContainer)`\n    background-color: #ebecf0;\n    width: 300px;\n    min-height: 40px;\n    margin-right: 20px;\n    border-radius: 3px;\n    padding: 8px 8px;\n    flex-grow: 0;\n`;\n\n\nexport const CardContainer = styled(DragPreviewContainer)`\n    background-color: #fff;\n    cursor: pointer;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    max-width: 300px;\n    border-radius: 3px;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n`;\n\ntype AddItemButtonProps = {\n    dark?: boolean\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n    background-color: #ffffff3d;\n    border-radius: 3px;\n    border: none;\n    color: ${props => props.dark ? \"#000\" : \"#fff\"};\n    cursor: pointer;\n    max-width: 300px;\n    padding: 10px 12px;\n    text-align: left;\n    transition: background 85ms ease-in;\n    width: 100%;\n    &:hover {\n    background-color: #ffffff52;\n    }\n`;\nexport const NewItemFormContainer = styled.div`\n    max-width: 300px;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    align-items: flex-start;\n`;\n\nexport const NewItemButton = styled.button`\n    background-color: #5aac44;\n    border-radius: 3px;\n    border: none;\n    box-shadow: none;\n    color: #fff;\n    padding: 6px 12px;\n    text-align: center;\n`;\nexport const NewItemInput = styled.input`\n    border-radius: 3px;\n    border: none;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    width: 100%;\n`;\nexport const CustomDragLayerContainer = styled.div`\n    height: 100%;\n    left: 0;\n    pointer-events: none;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: 100;\n`;//rendered first\n\n\n","import React, { useState } from \"react\";\nimport { NewItemFormContainer, NewItemButton, NewItemInput } from \"./styles\";\nimport { useFocus } from \"./utils/useFocus\";\n\n\ntype NewItemFormProps = {\n    onAdd(text: string): void\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps): JSX.Element => {\n    const [text, setText] = useState(\"\");\n    const inputRef = useFocus();\n    //add enter key for create\n    const handleAddText = (\n        event: React.KeyboardEvent<HTMLInputElement>\n    ) => {\n        if (event.key === \"Enter\") {\n            onAdd(text);\n        }\n    };\n        \n    return (\n        <NewItemFormContainer>\n            <NewItemInput\n                ref={inputRef}\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                onKeyPress={handleAddText}\n            />\n            <NewItemButton onClick={() => onAdd(text)}>\n                Create\n            </NewItemButton>\n        </NewItemFormContainer>\n    );\n};","import { useRef, useEffect } from \"react\";\n\n//refs react hook to reference DOM nodes of rendered React elements\nexport const useFocus = ():React.RefObject<HTMLInputElement> => {\n    const ref = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        ref.current?.focus();//ref will be immutable, use ?. to access it\n    }, []);\n    return ref;\n};\n//access the rendered input element","import React, { useState} from \"react\";\nimport { AddItemButton } from \"./styles\";\nimport { NewItemForm } from \"./NewItemForm\";\n\n\ntype AddNewItemProps = {\n    onAdd(text: string): void\n    toggleButtonText: string\n    dark?: boolean\n    }\n\nexport const AddNewItem = (props: AddNewItemProps): JSX.Element => {\n    const [showForm, setShowForm] = useState(false);\n    const { onAdd, toggleButtonText, dark } = props;\n    \n    if (showForm) {\n        return (\n            <NewItemForm\n                onAdd={text => {\n                    onAdd(text);\n                    setShowForm(false);\n                }}\n            />\n        );\n    }\n        \n    \n    return (\n        <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n            {toggleButtonText}\n        </AddItemButton>\n    );\n};","type Item = {\n    id: string\n}\n\nexport const findItemIndexById = <TItem extends Item>(\n    items: TItem[],\n    id: string\n):number => {\n    return items.findIndex((item: TItem) => item.id === id);\n};\nexport const moveItem = <TItem>(array: TItem[], from: number, to: number): TItem[] => {\n    const item = array[from];\n    return insertItemAtIndex(removeItemAtIndex(array, from), item, to);\n};\n\nexport function removeItemAtIndex<TItem>(array: TItem[], index: number)\n:TItem[]{\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n}\n\nexport function insertItemAtIndex<TItem>(\n    array: TItem[],\n    item: TItem,\n    index: number\n): TItem[] {\n    return [...array.slice(0, index), item, ...array.slice(index)];\n}\n    ","import { nanoid } from \"nanoid\";\nimport { findItemIndexById, moveItem } from \"../utils/arrayUtils\";\nimport { DragItem } from \"../DragItem\";\nimport { Action } from \"./actions\";\n\nexport type Task = {\n    id: string\n    text: string\n}\n\nexport type List = {\n    id: string\n    text: string\n    tasks: Task[]\n}\n\nexport type AppState = {\n    draggedItem: DragItem | null\n    lists: List[]\n}\n\nexport const appStateReducer = (\n    draft: AppState,\n    action: Action\n): AppState | void => {\n    switch (action.type) {\n    case \"SET_DRAGGED_ITEM\": {\n        draft.draggedItem = action.payload;\n        break;\n    }\n    case \"ADD_LIST\": {\n        draft.lists.push({\n            id: nanoid(),\n            text: action.payload,\n            tasks: []\n        });\n        break;\n    }\n    case \"ADD_TASK\": {\n        const { text, listId } = action.payload;\n        const targetListIndex = findItemIndexById(draft.lists, listId);\n\n        draft.lists[targetListIndex].tasks.push({\n            id: nanoid(),\n            text\n        });\n        break;\n    }\n    case \"MOVE_LIST\": {\n        const { draggedId, hoverId } = action.payload;\n        const dragIndex = findItemIndexById(draft.lists, draggedId);\n        const hoverIndex = findItemIndexById(draft.lists, hoverId);\n        draft.lists = moveItem(draft.lists, dragIndex, hoverIndex);\n        break;\n    }\n    case \"MOVE_TASK\": {\n        const {\n            draggedItemId,\n            hoveredItemId,\n            sourceColumnId,\n            targetColumnId\n        } = action.payload;\n\n        const sourceListIndex = findItemIndexById(\n            draft.lists,\n            sourceColumnId\n        );\n        const targetListIndex = findItemIndexById(\n            draft.lists,\n            targetColumnId\n        );\n\n        const dragIndex = findItemIndexById(\n            draft.lists[sourceListIndex].tasks,\n            draggedItemId\n        );\n\n        const hoverIndex = hoveredItemId\n            ? findItemIndexById(\n                draft.lists[targetListIndex].tasks,\n                hoveredItemId\n            )\n            : 0;\n        const item = draft.lists[sourceListIndex].tasks[dragIndex];\n\n        // Remove the task from the source list\n        draft.lists[sourceListIndex].tasks.splice(dragIndex, 1);\n\n        // Add the task to the target list\n        draft.lists[targetListIndex].tasks.splice(hoverIndex, 0, item);\n        break;\n    }\n    default: {\n        break;\n    }\n    }\n};","import React, { createContext, useContext, Dispatch, FC } from \"react\";\nimport { Action } from \"./actions\";\nimport { useImmerReducer } from \"use-immer\";\nimport {\n    appStateReducer,\n    AppState,\n    List,\n    Task\n} from \"./appStateReducer\";\nimport { DragItem } from \"../DragItem\";\n\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps);\n\nconst appData: AppState = {\n    draggedItem: null,\n    lists: [\n        {\n            id: \"0\",\n            text: \"To Do\",\n            tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }]\n        },\n        {\n            id: \"1\",\n            text: \"In Progress\",\n            tasks: [{ id: \"c2\", text: \"Learn Typescript\" }]\n        },\n        {\n            id: \"2\",\n            text: \"Done\",\n            tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }]\n        }\n    ]\n};\n\ntype AppStateContextProps = {\n    draggedItem: DragItem | null\n    lists: List[]\n    getTasksByListId(id: string): Task[]\n    dispatch: Dispatch<Action>\n}\n    \n//making sure we can access data globally\nexport const useAppState = (): AppStateContextProps => {\n    return useContext(AppStateContext);\n};\n\nexport const AppStateProvider: FC = ({ children }) => {\n    const [state, dispatch] = useImmerReducer(appStateReducer, appData);\n    \n    const { draggedItem, lists } = state;\n    const getTasksByListId = (id: string) => {\n        return lists.find((list) => list.id === id)?.tasks || [];\n    };\n    return (\n        <AppStateContext.Provider value={{ draggedItem, lists, getTasksByListId, dispatch }}>\n            {children}\n        </AppStateContext.Provider>\n    );\n};","import { DragItem } from \"../DragItem\";\n\n//an action now can resort to one of the forms we passed in, the list or task\nexport type Action =\n    | {\n        type: \"MOVE_TASK\"\n        payload: {\n            draggedItemId: string\n            hoveredItemId: string | null\n            sourceColumnId: string\n            targetColumnId: string\n        }\n    }\n    | {\n        type: \"ADD_LIST\"\n        payload: string\n    }\n    | {\n        type: \"ADD_TASK\"\n        payload: { text: string; listId: string }\n    }\n    | {\n        type: \"MOVE_LIST\"\n        payload: {\n            draggedId: string\n            hoverId: string\n        }\n    }\n    | {\n        type: \"SET_DRAGGED_ITEM\"\n        payload: DragItem | null\n    }\n\n/*what I had before I decided to use a discriminated union which\nallows the Typescript to look at the property and understand the other fields\n    interface AddListAction {\n        type: \"ADD_LIST\"\n        payload: string\n    }\n\n    interface AddTaskAction {\n        type: \"ADD_LIST\"\n        payload: { text: string; listId: string }\n    }\n\n    type Action = AddListAction | AddTaskAction\n\n*/\n\n\nexport const addTask = (\n    text: string,\n    listId: string,\n): Action => ({\n    type: \"ADD_TASK\",\n    payload: {\n        text,\n        listId\n    }\n});\n\nexport const addList = (\n    text: string,\n): Action => ({\n    type: \"ADD_LIST\",\n    payload: text\n});\n\nexport const moveList = (\n    draggedId: string,\n    hoverId: string,\n): Action => ({\n    type: \"MOVE_LIST\",\n    payload: {\n        draggedId,\n        hoverId,\n    }\n});\n\nexport const setDraggedItem = (\n    draggedItem: DragItem | null,\n): Action => ({\n    type: \"SET_DRAGGED_ITEM\",\n    payload: draggedItem\n});\n\nexport const moveTask = (\n    draggedItemId: string,\n    hoveredItemId: string | null,\n    sourceColumnId: string,\n    targetColumnId: string\n): Action => ({\n    type: \"MOVE_TASK\",\n    payload: {\n        draggedItemId,\n        hoveredItemId,\n        sourceColumnId,\n        targetColumnId\n    }\n});\n\n\n","import { ConnectDragSource, useDrag } from \"react-dnd\";\nimport { useAppState } from \"../state/AppStateContext\";\nimport { DragItem } from \"../DragItem\";\nimport { setDraggedItem } from \"../state/actions\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { useEffect } from \"react\";\nexport const useItemDrag = (item: DragItem): {drag: ConnectDragSource} => {\n    const { dispatch } = useAppState();\n    const [, drag, preview] = useDrag({\n        type: item.type,\n        item: () => {\n            dispatch(setDraggedItem(item));\n            return item;\n        },\n        end: () => dispatch(setDraggedItem(null))\n    });\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n    return { drag };\n};","import { DragItem } from \"../DragItem\";\nexport const isHidden = (\n    draggedItem: DragItem | null,\n    itemType: string,\n    id: string,\n    isPreview?: boolean\n): boolean => {\n    return Boolean(\n        !isPreview &&\n        draggedItem &&\n        draggedItem.type === itemType &&\n        draggedItem.id === id\n    );\n};\n","import React from \"react\";\nimport { useRef } from \"react\";\nimport { CardContainer } from \"./styles\";\nimport { useItemDrag } from \"./utils/useItemDrag\";\nimport { useDrop } from \"react-dnd\";\nimport { useAppState } from \"./state/AppStateContext\";\nimport { isHidden } from \"./utils/isHidden\";\nimport { moveTask } from \"./state/actions\";\n\ntype CardProps = {\n    text: string\n    id: string\n    columnId: string\n    isPreview?: boolean\n}\n\nexport const Card = ({\n    text,\n    id,\n    columnId,\n    isPreview\n}: CardProps): JSX.Element => {\n    const { draggedItem, dispatch } = useAppState();\n    const ref = useRef<HTMLDivElement>(null);\n    const { drag } = useItemDrag({\n        type: \"CARD\",\n        id,\n        text,\n        columnId\n    });\n    const [, drop] = useDrop({\n        accept: \"CARD\",\n        hover() {\n            if (!draggedItem) {\n                return;\n            }\n            if (draggedItem.type !== \"CARD\") {\n                return;\n            }\n            if (draggedItem.id === id) {\n                return;\n            }\n\n            dispatch(\n                moveTask(draggedItem.id, id, draggedItem.columnId, columnId)\n            );\n        }\n    });\n\n    drag(drop(ref));\n\n    return (\n        <CardContainer\n            isHidden={isHidden(draggedItem, \"CARD\", id, isPreview)}\n            isPreview={isPreview}\n            ref={ref}\n        >\n            {text}\n        </CardContainer>\n    );\n};","import React, { useRef } from \"react\";\nimport { ColumnContainer, ColumnTitle } from \"./styles\";\nimport { useAppState } from \"./state/AppStateContext\";\nimport { Card } from \"./Card\";\nimport { AddNewItem } from \"./AddNewItem\";\nimport { useItemDrag } from \"./utils/useItemDrag\";\nimport { useDrop } from \"react-dnd\";\nimport { isHidden } from \"./utils/isHidden\";\nimport {\n    addTask,\n    moveTask,\n    moveList,\n    setDraggedItem\n} from \"./state/actions\";\n\ntype ColumnProps = {\n    text: string\n    id: string\n    isPreview?: boolean\n}\n\nexport const Column = ({ text, id, isPreview }: ColumnProps): JSX.Element => {\n    const { draggedItem, getTasksByListId, dispatch } = useAppState();\n    const tasks = getTasksByListId(id);\n    const ref = useRef<HTMLDivElement>(null);\n    const [, drop] = useDrop({\n        accept: [\"COLUMN\", \"CARD\"],\n        hover() {\n            if (!draggedItem) {\n                return;\n            }\n            if (draggedItem.type === \"COLUMN\") {\n                if (draggedItem.id === id) {\n                    return;\n                }\n\n                dispatch(moveList(draggedItem.id, id));\n            } else {\n                if (draggedItem.columnId === id) {\n                    return;\n                }\n                if (tasks.length) {\n                    return;\n                }\n\n                dispatch(\n                    moveTask(draggedItem.id, null, draggedItem.columnId, id)\n                );\n                dispatch(setDraggedItem({ ...draggedItem, columnId: id }));\n            }\n        }\n    });\n\n    const { drag } = useItemDrag({ type: \"COLUMN\", id, text });\n\n    drag(drop(ref));\n\n    return (\n        <ColumnContainer\n            isPreview={isPreview}\n            ref={ref}\n            isHidden={isHidden(draggedItem, \"COLUMN\", id, isPreview)}\n        >\n            <ColumnTitle>{text}</ColumnTitle>\n            {tasks.map(task => \n                <Card\n                    id={task.id}\n                    columnId={id}\n                    text={task.text}\n                    key={task.id}\n                />\n            )}\n            <AddNewItem\n                toggleButtonText=\"+ Add another card\"\n                onAdd={(text) => dispatch(addTask(text, id))}\n                dark\n            />\n        </ColumnContainer>\n    );\n};","import React from \"react\";\nimport { useDragLayer } from \"react-dnd\";\nimport { Column } from \"./Column\";\nimport { useAppState } from \"./state/AppStateContext\";\nimport {\n    CustomDragLayerContainer,\n    DragPreviewWrapper\n} from \"./styles\";\nimport { Card } from \"./Card\";\n//import { StyledComponent } from \"styled-components\";\n\n\nexport const CustomDragLayer = (): JSX.Element | null => {\n    const { draggedItem } = useAppState();\n    const { currentOffset } = useDragLayer((monitor) => ({\n        currentOffset: monitor.getSourceClientOffset()\n    }));\n    return draggedItem && currentOffset ? \n        <CustomDragLayerContainer>\n            <DragPreviewWrapper position={currentOffset}>\n                {draggedItem.type === \"COLUMN\" ? \n                    <Column\n                        id={draggedItem.id}\n                        text={draggedItem.text}\n                        isPreview\n                    />\n                    :\n                    <Card\n                        columnId={draggedItem.columnId}\n                        isPreview\n                        id={draggedItem.id}\n                        text={draggedItem.text}\n                    />\n                }\n            </DragPreviewWrapper>\n        </CustomDragLayerContainer>\n        : null;\n};\n","import React from \"react\";\nimport { AppContainer } from \"../styles\";\nimport { AddNewItem } from \"../AddNewItem\";\nimport { CustomDragLayer } from \"../CustomDragLayer\";\nimport { useAppState } from \"../state/AppStateContext\";\nimport { addList } from \"../state/actions\";\nimport { Column } from \"../Column\";\n\nexport function ListContainer(): JSX.Element {\n    const { lists, dispatch } = useAppState();\n    const test = lists.map(list => \n        <Column id={list.id} text={list.text} key={list.id} />\n    );\n    return(\n        <AppContainer>\n            <CustomDragLayer />\n            {test}\n            <AddNewItem\n                toggleButtonText=\"+ Add another list\"\n                onAdd={text => dispatch(addList(text))}\n            />\n        </AppContainer>\n    );\n}","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n//import { Names } from \"./components/Names\";\nimport { Welcome } from \"./components/Welcome\";\nimport { Dropdown } from \"./components/CourseDropdown\";\nimport { LoadClasses } from \"./components/DragButtons\";\n//import { SemesterButton } from \"./components/SemesterButton\";\nimport \"./components/Message.css\";\nimport { Message } from \"./components/Message\";\nimport { Footer } from \"./components/Footer\";\n//import { Column } from \"./Column\";\n//import { AppContainer } from \"./styles\";\n//import { AddNewItem } from \"./AddNewItem\";\n//import { useAppState } from \"./state/AppStateContext\";\n//import { addList } from \"./state/actions\";\n//import { CustomDragLayer } from \"./CustomDragLayer\";\nimport { ListContainer } from \"./components/ListContainer\";\n\n/*\nfunction App(): JSX.Element {\n    return (\n        <div className = \"App\">\n            <Message />\n            <Welcome></Welcome>\n            <Dropdown></Dropdown>\n            <div className='rowC'>\n                <LoadClasses></LoadClasses>\n                <AppContainer>\n                    <CustomDragLayer />\n                    {lists.map((list) => (\n                        <Column id={list.id} text={list.text} key={list.id} />\n                    ))}\n                    <AddNewItem\n                        toggleButtonText=\"+ Add another list\"\n                        onAdd={text => dispatch(addList(text))}\n                    />\n                </AppContainer>\n            </div>\n            <Footer />\n        </div>\n    );\n}\n*/\n\nexport const App = ():JSX.Element  => {\n//export function App(): JSX.Element {\n    return (\n        <div className = \"App\">\n            <Message />\n            <Welcome></Welcome>\n            <Dropdown></Dropdown>\n            <div className='rowC'>\n                <LoadClasses></LoadClasses>\n                <ListContainer />\n            </div>\n            <Footer />\n        </div>\n    );\n};\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppStateProvider } from \"./state/AppStateContext\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend as Backend } from \"react-dnd-html5-backend\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <DndProvider backend={Backend}>\n            <AppStateProvider>\n                <App />\n            </AppStateProvider>\n        </DndProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}